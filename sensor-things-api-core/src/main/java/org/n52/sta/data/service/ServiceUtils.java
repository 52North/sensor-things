package org.n52.sta.data.service;

import org.locationtech.jts.geom.Geometry;
import org.n52.series.db.beans.AbstractFeatureEntity;
import org.n52.series.db.beans.FeatureEntity;
import org.n52.series.db.beans.FormatEntity;
import org.n52.series.db.beans.sta.LocationEntity;
import org.n52.shetland.ogc.om.features.SfConstants;

public class ServiceUtils {

    static AbstractFeatureEntity<?> createFeatureOfInterest(LocationEntity location) {
        FeatureEntity featureOfInterest = new FeatureEntity();
        featureOfInterest.setIdentifier(location.getIdentifier());
        // Used to distinguish in FeatureOfInterestService
        featureOfInterest.setXml("autogenerated");
        featureOfInterest.setName(location.getName());
        featureOfInterest.setDescription(location.getDescription());
        featureOfInterest.setGeometryEntity(location.getGeometryEntity());
        featureOfInterest.setFeatureType(createFeatureType(location.getGeometry()));
        return featureOfInterest;
    }

    public static FormatEntity createFeatureType(Geometry geometry) {
        FormatEntity formatEntity = new FormatEntity();
        if (geometry != null) {
            switch (geometry.getGeometryType()) {
                case "Point":
                    formatEntity.setFormat(SfConstants.SAMPLING_FEAT_TYPE_SF_SAMPLING_POINT);
                    break;
                case "LineString":
                    formatEntity.setFormat(SfConstants.SAMPLING_FEAT_TYPE_SF_SAMPLING_CURVE);
                    break;
                case "Polygon":
                    formatEntity.setFormat(SfConstants.SAMPLING_FEAT_TYPE_SF_SAMPLING_SURFACE);
                    break;
                default:
                    formatEntity.setFormat(SfConstants.SAMPLING_FEAT_TYPE_SF_SPATIAL_SAMPLING_FEATURE);
                    break;
            }
            return formatEntity;
        }
        return formatEntity.setFormat(SfConstants.SAMPLING_FEAT_TYPE_SF_SAMPLING_FEATURE);
    }
}
